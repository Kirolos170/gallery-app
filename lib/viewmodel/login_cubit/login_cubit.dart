
import 'package:bloc/bloc.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:task/viewmodel/Database/dio_helper.dart';
import 'package:task/viewmodel/login_cubit/login_state.dart';
import 'package:http/http.dart' as http;

import '../../model/login_model.dart';
import '../../view/pages/gallery_screen.dart';
import '../Database/end_points.dart';
class LoginCubit extends Cubit<LoginState> {


  LoginCubit() : super(LoginInitial());

  static LoginCubit get(context) => BlocProvider.of(context);


  TextEditingController emailc = TextEditingController();
  TextEditingController passwordc = TextEditingController();
  final formKey = GlobalKey<FormState>();
  Autogenerated? mymodel ;


// void login (context)  async
// {
//
//
//   await  DioHelper.postData(url: loginEndPoint, data: {
//
//     "email" : emailc.toString() ,
//     "password" : passwordc .toString()
//
//
//   }) .then((value) {
//
//     var json = value.data ;
//     print(value) ;
//
//     mymodel = Autogenerated.fromJson(json) ;
//     if(value.statusCode == 200)
//       {
//
//         Navigator.push(context, MaterialPageRoute(builder: (context)=>GalleryScreen())) ;
//       }
// emit(LoginSucsses()) ;
//   }) .catchError((e) {
//     emit(LoginFail());
//     print("fail");
//   }
//   ) ;
//   }



// using http


  Future<void> signIn( context) async {
    // Define the endpoint URL for your sign-in API
    final String apiUrl = 'https://flutter.prominaagency.com/api/auth/login';

    try {
      // Make the POST request with the email and password in the body
      final response = await http.post(
        Uri.parse(apiUrl),
        body: {
          'email': emailc.text,
          'password': passwordc.text,
        },
      );

      // Check the response status code
      if (response.statusCode == 200) {
        // Request was successful, handle the response data
        print('Signed in successfully');
        Navigator.push(context, MaterialPageRoute(builder: (context)=>GalleryScreen())) ;
        emit(LoginSucsses()) ;
      } else {
        // Request failed, handle the error
        print('Failed to sign in: ${response.statusCode}');
        print('Error message: ${response.body}');
      }
    } catch (e) {
      // An error occurred, handle the exception
      print('Error while signing in: $e');
    }
  }




}




